//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1318
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Chapter08.BlinqNorthwindDAL {
  using System;
  using System.Collections.Generic;
  using System.ComponentModel;
  using System.Reflection;
  using System.Query;
  using System.Expressions;
  using System.Data;
  using System.Data.DLinq;
  
  
  public partial class Northwind : DataContext {
    
    public Table<Shipper> Shippers;
    
    public Table<Order> Orders;
    
    public Table<OrderDetail> OrderDetails;
    
    public Table<CustomerDemographic> CustomerDemographics;
    
    public Table<Region> Regions;
    
    public Table<TextEntry> TextEntries;
    
    public Table<Employee> Employees;
    
    public Table<Category> Categories;
    
    public Table<Customer> Customers;
    
    public Table<Supplier> Suppliers;
    
    public Table<ProductCategoryMap> ProductCategoryMaps;
    
    public Table<CustomerCustomerDemo> CustomerCustomerDemos;
    
    public Table<Territory> Territories;
    
    public Table<EmployeeTerritory> EmployeeTerritories;
    
    public Table<Product> Products;
    
    public Northwind(string connection) : 
        base(connection) {
    }
    
    public Northwind(System.Data.IDbConnection connection) : 
        base(connection) {
    }
    
    public Northwind(string connection, System.Data.DLinq.MappingSource mappingSource) : 
        base(connection, mappingSource) {
    }
    
    public Northwind(System.Data.IDbConnection connection, System.Data.DLinq.MappingSource mappingSource) : 
        base(connection, mappingSource) {
    }
  }
  
  [Table(Name="Shippers")]
  public partial class Shipper : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private int _ShipperID;
    
    private string _CompanyName;
    
    private string _Phone;
    
    private EntitySet<Order> _Orders;
    
    public Shipper() {
      this._Orders = new EntitySet<Order>(new Notification<Order>(this.attach_Orders), new Notification<Order>(this.detach_Orders));
    }
    
    [Column(Storage="_ShipperID", DBType="Int NOT NULL IDENTITY", Id=true, AutoGen=true)]
    [DataObjectField(true, true, false)]
    [Precision(Precision=10, Scale=255)]
    public int ShipperID {
      get {
        return this._ShipperID;
      }
      set {
        if ((this._ShipperID != value)) {
          this.OnPropertyChanging("ShipperID");
          this._ShipperID = value;
          this.OnPropertyChanged("ShipperID");
        }
      }
    }
    
    [Column(Storage="_CompanyName", DBType="NVarChar(40) NOT NULL")]
    [DataObjectField(false, false, false, 40)]
    public string CompanyName {
      get {
        return this._CompanyName;
      }
      set {
        if ((this._CompanyName != value)) {
          this.OnPropertyChanging("CompanyName");
          this._CompanyName = value;
          this.OnPropertyChanged("CompanyName");
        }
      }
    }
    
    [Column(Storage="_Phone", DBType="NVarChar(24)")]
    [DataObjectField(false, false, false, 24)]
    public string Phone {
      get {
        return this._Phone;
      }
      set {
        if ((this._Phone != value)) {
          this.OnPropertyChanging("Phone");
          this._Phone = value;
          this.OnPropertyChanged("Phone");
        }
      }
    }
    
    [Association(Name="FK_Orders_Shippers", Storage="_Orders", OtherKey="ShipVia")]
    public EntitySet<Order> Orders {
      get {
        return this._Orders;
      }
      set {
        this._Orders.Assign(value);
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    private void attach_Orders(Order entity) {
      this.OnPropertyChanging(null);
      entity.Shipper = this;
      this.OnPropertyChanged(null);
    }
    
    private void detach_Orders(Order entity) {
      this.OnPropertyChanging(null);
      entity.Shipper = null;
      this.OnPropertyChanged(null);
    }
  }
  
  [Table(Name="Orders")]
  public partial class Order : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private int _OrderID;
    
    private string _CustomerID;
    
    private System.Nullable<int> _EmployeeID;
    
    private System.Nullable<System.DateTime> _OrderDate;
    
    private System.Nullable<System.DateTime> _RequiredDate;
    
    private System.Nullable<System.DateTime> _ShippedDate;
    
    private System.Nullable<int> _ShipVia;
    
    private System.Nullable<decimal> _Freight;
    
    private string _ShipName;
    
    private string _ShipAddress;
    
    private string _ShipCity;
    
    private string _ShipRegion;
    
    private string _ShipPostalCode;
    
    private string _ShipCountry;
    
    private EntitySet<OrderDetail> _OrderDetails;
    
    private EntityRef<Customer> _Customer;
    
    private EntityRef<Employee> _Employee;
    
    private EntityRef<Shipper> _Shipper;
    
    public Order() {
      this._OrderDetails = new EntitySet<OrderDetail>(new Notification<OrderDetail>(this.attach_OrderDetails), new Notification<OrderDetail>(this.detach_OrderDetails));
      this._Customer = default(EntityRef<Customer>);
      this._Employee = default(EntityRef<Employee>);
      this._Shipper = default(EntityRef<Shipper>);
    }
    
    [Column(Storage="_OrderID", DBType="Int NOT NULL IDENTITY", Id=true, AutoGen=true)]
    [DataObjectField(true, true, false)]
    [Precision(Precision=10, Scale=255)]
    public int OrderID {
      get {
        return this._OrderID;
      }
      set {
        if ((this._OrderID != value)) {
          this.OnPropertyChanging("OrderID");
          this._OrderID = value;
          this.OnPropertyChanged("OrderID");
        }
      }
    }
    
    [Column(Storage="_CustomerID", DBType="NChar(5)")]
    [DataObjectField(false, false, false, 5)]
    public string CustomerID {
      get {
        return this._CustomerID;
      }
      set {
        if ((this._CustomerID != value)) {
          this.OnPropertyChanging("CustomerID");
          this._CustomerID = value;
          this.OnPropertyChanged("CustomerID");
        }
      }
    }
    
    [Column(Storage="_EmployeeID", DBType="Int")]
    [DataObjectField(false, false, true)]
    [Precision(Precision=10, Scale=255)]
    public System.Nullable<int> EmployeeID {
      get {
        return this._EmployeeID;
      }
      set {
        if ((this._EmployeeID != value)) {
          this.OnPropertyChanging("EmployeeID");
          this._EmployeeID = value;
          this.OnPropertyChanged("EmployeeID");
        }
      }
    }
    
    [Column(Storage="_OrderDate", DBType="DateTime")]
    [DataObjectField(false, false, true)]
    public System.Nullable<System.DateTime> OrderDate {
      get {
        return this._OrderDate;
      }
      set {
        if ((this._OrderDate != value)) {
          this.OnPropertyChanging("OrderDate");
          this._OrderDate = value;
          this.OnPropertyChanged("OrderDate");
        }
      }
    }
    
    [Column(Storage="_RequiredDate", DBType="DateTime")]
    [DataObjectField(false, false, true)]
    public System.Nullable<System.DateTime> RequiredDate {
      get {
        return this._RequiredDate;
      }
      set {
        if ((this._RequiredDate != value)) {
          this.OnPropertyChanging("RequiredDate");
          this._RequiredDate = value;
          this.OnPropertyChanged("RequiredDate");
        }
      }
    }
    
    [Column(Storage="_ShippedDate", DBType="DateTime")]
    [DataObjectField(false, false, true)]
    public System.Nullable<System.DateTime> ShippedDate {
      get {
        return this._ShippedDate;
      }
      set {
        if ((this._ShippedDate != value)) {
          this.OnPropertyChanging("ShippedDate");
          this._ShippedDate = value;
          this.OnPropertyChanged("ShippedDate");
        }
      }
    }
    
    [Column(Storage="_ShipVia", DBType="Int")]
    [DataObjectField(false, false, true)]
    [Precision(Precision=10, Scale=255)]
    public System.Nullable<int> ShipVia {
      get {
        return this._ShipVia;
      }
      set {
        if ((this._ShipVia != value)) {
          this.OnPropertyChanging("ShipVia");
          this._ShipVia = value;
          this.OnPropertyChanged("ShipVia");
        }
      }
    }
    
    [Column(Storage="_Freight", DBType="Money")]
    [DataObjectField(false, false, true)]
    [Precision(Precision=19, Scale=255)]
    public System.Nullable<decimal> Freight {
      get {
        return this._Freight;
      }
      set {
        if ((this._Freight != value)) {
          this.OnPropertyChanging("Freight");
          this._Freight = value;
          this.OnPropertyChanged("Freight");
        }
      }
    }
    
    [Column(Storage="_ShipName", DBType="NVarChar(40)")]
    [DataObjectField(false, false, false, 40)]
    public string ShipName {
      get {
        return this._ShipName;
      }
      set {
        if ((this._ShipName != value)) {
          this.OnPropertyChanging("ShipName");
          this._ShipName = value;
          this.OnPropertyChanged("ShipName");
        }
      }
    }
    
    [Column(Storage="_ShipAddress", DBType="NVarChar(60)")]
    [DataObjectField(false, false, false, 60)]
    public string ShipAddress {
      get {
        return this._ShipAddress;
      }
      set {
        if ((this._ShipAddress != value)) {
          this.OnPropertyChanging("ShipAddress");
          this._ShipAddress = value;
          this.OnPropertyChanged("ShipAddress");
        }
      }
    }
    
    [Column(Storage="_ShipCity", DBType="NVarChar(15)")]
    [DataObjectField(false, false, false, 15)]
    public string ShipCity {
      get {
        return this._ShipCity;
      }
      set {
        if ((this._ShipCity != value)) {
          this.OnPropertyChanging("ShipCity");
          this._ShipCity = value;
          this.OnPropertyChanged("ShipCity");
        }
      }
    }
    
    [Column(Storage="_ShipRegion", DBType="NVarChar(15)")]
    [DataObjectField(false, false, false, 15)]
    public string ShipRegion {
      get {
        return this._ShipRegion;
      }
      set {
        if ((this._ShipRegion != value)) {
          this.OnPropertyChanging("ShipRegion");
          this._ShipRegion = value;
          this.OnPropertyChanged("ShipRegion");
        }
      }
    }
    
    [Column(Storage="_ShipPostalCode", DBType="NVarChar(10)")]
    [DataObjectField(false, false, false, 10)]
    public string ShipPostalCode {
      get {
        return this._ShipPostalCode;
      }
      set {
        if ((this._ShipPostalCode != value)) {
          this.OnPropertyChanging("ShipPostalCode");
          this._ShipPostalCode = value;
          this.OnPropertyChanged("ShipPostalCode");
        }
      }
    }
    
    [Column(Storage="_ShipCountry", DBType="NVarChar(15)")]
    [DataObjectField(false, false, false, 15)]
    public string ShipCountry {
      get {
        return this._ShipCountry;
      }
      set {
        if ((this._ShipCountry != value)) {
          this.OnPropertyChanging("ShipCountry");
          this._ShipCountry = value;
          this.OnPropertyChanged("ShipCountry");
        }
      }
    }
    
    [Association(Name="FK_Order_Details_Orders", Storage="_OrderDetails", OtherKey="OrderID")]
    public EntitySet<OrderDetail> OrderDetails {
      get {
        return this._OrderDetails;
      }
      set {
        this._OrderDetails.Assign(value);
      }
    }
    
    [Association(Name="FK_Orders_Customers", Storage="_Customer", ThisKey="CustomerID", IsParent=true)]
    public Customer Customer {
      get {
        return this._Customer.Entity;
      }
      set {
        Customer v = this._Customer.Entity;
        if ((v != value)) {
          this.OnPropertyChanging("Customer");
          if ((v != null)) {
            this._Customer.Entity = null;
            v.Orders.Remove(this);
          }
          this._Customer.Entity = value;
          if ((value != null)) {
            value.Orders.Add(this);
          }
          this.OnPropertyChanged("Customer");
        }
      }
    }
    
    [Association(Name="FK_Orders_Employees", Storage="_Employee", ThisKey="EmployeeID", IsParent=true)]
    public Employee Employee {
      get {
        return this._Employee.Entity;
      }
      set {
        Employee v = this._Employee.Entity;
        if ((v != value)) {
          this.OnPropertyChanging("Employee");
          if ((v != null)) {
            this._Employee.Entity = null;
            v.Orders.Remove(this);
          }
          this._Employee.Entity = value;
          if ((value != null)) {
            value.Orders.Add(this);
          }
          this.OnPropertyChanged("Employee");
        }
      }
    }
    
    [Association(Name="FK_Orders_Shippers", Storage="_Shipper", ThisKey="ShipVia", IsParent=true)]
    public Shipper Shipper {
      get {
        return this._Shipper.Entity;
      }
      set {
        Shipper v = this._Shipper.Entity;
        if ((v != value)) {
          this.OnPropertyChanging("Shipper");
          if ((v != null)) {
            this._Shipper.Entity = null;
            v.Orders.Remove(this);
          }
          this._Shipper.Entity = value;
          if ((value != null)) {
            value.Orders.Add(this);
          }
          this.OnPropertyChanged("Shipper");
        }
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    private void attach_OrderDetails(OrderDetail entity) {
      this.OnPropertyChanging(null);
      entity.Order = this;
      this.OnPropertyChanged(null);
    }
    
    private void detach_OrderDetails(OrderDetail entity) {
      this.OnPropertyChanging(null);
      entity.Order = null;
      this.OnPropertyChanged(null);
    }
  }
  
  [Table(Name="Order Details")]
  public partial class OrderDetail : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private int _OrderID;
    
    private int _ProductID;
    
    private decimal _UnitPrice;
    
    private short _Quantity;
    
    private float _Discount;
    
    private EntityRef<Order> _Order;
    
    private EntityRef<Product> _Product;
    
    public OrderDetail() {
      this._Order = default(EntityRef<Order>);
      this._Product = default(EntityRef<Product>);
    }
    
    [Column(Storage="_OrderID", DBType="Int NOT NULL", Id=true)]
    [DataObjectField(true, false, false)]
    [Precision(Precision=10, Scale=255)]
    public int OrderID {
      get {
        return this._OrderID;
      }
      set {
        if ((this._OrderID != value)) {
          this.OnPropertyChanging("OrderID");
          this._OrderID = value;
          this.OnPropertyChanged("OrderID");
        }
      }
    }
    
    [Column(Storage="_ProductID", DBType="Int NOT NULL", Id=true)]
    [DataObjectField(true, false, false)]
    [Precision(Precision=10, Scale=255)]
    public int ProductID {
      get {
        return this._ProductID;
      }
      set {
        if ((this._ProductID != value)) {
          this.OnPropertyChanging("ProductID");
          this._ProductID = value;
          this.OnPropertyChanged("ProductID");
        }
      }
    }
    
    [Column(Storage="_UnitPrice", DBType="Money NOT NULL")]
    [DataObjectField(false, false, false)]
    [Precision(Precision=19, Scale=255)]
    public decimal UnitPrice {
      get {
        return this._UnitPrice;
      }
      set {
        if ((this._UnitPrice != value)) {
          this.OnPropertyChanging("UnitPrice");
          this._UnitPrice = value;
          this.OnPropertyChanged("UnitPrice");
        }
      }
    }
    
    [Column(Storage="_Quantity", DBType="SmallInt NOT NULL")]
    [DataObjectField(false, false, false)]
    [Precision(Precision=5, Scale=255)]
    public short Quantity {
      get {
        return this._Quantity;
      }
      set {
        if ((this._Quantity != value)) {
          this.OnPropertyChanging("Quantity");
          this._Quantity = value;
          this.OnPropertyChanged("Quantity");
        }
      }
    }
    
    [Column(Storage="_Discount", DBType="Real NOT NULL")]
    [DataObjectField(false, false, false)]
    [Precision(Precision=7, Scale=255)]
    public float Discount {
      get {
        return this._Discount;
      }
      set {
        if ((this._Discount != value)) {
          this.OnPropertyChanging("Discount");
          this._Discount = value;
          this.OnPropertyChanged("Discount");
        }
      }
    }
    
    [Association(Name="FK_Order_Details_Orders", Storage="_Order", ThisKey="OrderID", IsParent=true)]
    public Order Order {
      get {
        return this._Order.Entity;
      }
      set {
        Order v = this._Order.Entity;
        if ((v != value)) {
          this.OnPropertyChanging("Order");
          if ((v != null)) {
            this._Order.Entity = null;
            v.OrderDetails.Remove(this);
          }
          this._Order.Entity = value;
          if ((value != null)) {
            value.OrderDetails.Add(this);
          }
          this.OnPropertyChanged("Order");
        }
      }
    }
    
    [Association(Name="FK_Order_Details_Products", Storage="_Product", ThisKey="ProductID", IsParent=true)]
    public Product Product {
      get {
        return this._Product.Entity;
      }
      set {
        Product v = this._Product.Entity;
        if ((v != value)) {
          this.OnPropertyChanging("Product");
          if ((v != null)) {
            this._Product.Entity = null;
            v.OrderDetails.Remove(this);
          }
          this._Product.Entity = value;
          if ((value != null)) {
            value.OrderDetails.Add(this);
          }
          this.OnPropertyChanged("Product");
        }
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
  }
  
  [Table(Name="CustomerDemographics")]
  public partial class CustomerDemographic : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private string _CustomerTypeID;
    
    private string _CustomerDesc;
    
    private EntitySet<CustomerCustomerDemo> _CustomerCustomerDemos;
    
    public CustomerDemographic() {
      this._CustomerCustomerDemos = new EntitySet<CustomerCustomerDemo>(new Notification<CustomerCustomerDemo>(this.attach_CustomerCustomerDemos), new Notification<CustomerCustomerDemo>(this.detach_CustomerCustomerDemos));
    }
    
    [Column(Storage="_CustomerTypeID", DBType="NChar(10) NOT NULL", Id=true)]
    [DataObjectField(true, false, false, 10)]
    public string CustomerTypeID {
      get {
        return this._CustomerTypeID;
      }
      set {
        if ((this._CustomerTypeID != value)) {
          this.OnPropertyChanging("CustomerTypeID");
          this._CustomerTypeID = value;
          this.OnPropertyChanged("CustomerTypeID");
        }
      }
    }
    
    [Column(Storage="_CustomerDesc", DBType="NText", UpdateCheck=System.Data.DLinq.UpdateCheck.Never)]
    [DataObjectField(false, false, false, 1073741823)]
    public string CustomerDesc {
      get {
        return this._CustomerDesc;
      }
      set {
        if ((this._CustomerDesc != value)) {
          this.OnPropertyChanging("CustomerDesc");
          this._CustomerDesc = value;
          this.OnPropertyChanged("CustomerDesc");
        }
      }
    }
    
    [Association(Name="FK_CustomerCustomerDemo", Storage="_CustomerCustomerDemos", OtherKey="CustomerTypeID")]
    public EntitySet<CustomerCustomerDemo> CustomerCustomerDemos {
      get {
        return this._CustomerCustomerDemos;
      }
      set {
        this._CustomerCustomerDemos.Assign(value);
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    private void attach_CustomerCustomerDemos(CustomerCustomerDemo entity) {
      this.OnPropertyChanging(null);
      entity.CustomerDemographic = this;
      this.OnPropertyChanged(null);
    }
    
    private void detach_CustomerCustomerDemos(CustomerCustomerDemo entity) {
      this.OnPropertyChanging(null);
      entity.CustomerDemographic = null;
      this.OnPropertyChanged(null);
    }
  }
  
  [Table(Name="Region")]
  public partial class Region : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private int _RegionID;
    
    private string _RegionDescription;
    
    private EntitySet<Territory> _Territories;
    
    public Region() {
      this._Territories = new EntitySet<Territory>(new Notification<Territory>(this.attach_Territories), new Notification<Territory>(this.detach_Territories));
    }
    
    [Column(Storage="_RegionID", DBType="Int NOT NULL", Id=true)]
    [DataObjectField(true, false, false)]
    [Precision(Precision=10, Scale=255)]
    public int RegionID {
      get {
        return this._RegionID;
      }
      set {
        if ((this._RegionID != value)) {
          this.OnPropertyChanging("RegionID");
          this._RegionID = value;
          this.OnPropertyChanged("RegionID");
        }
      }
    }
    
    [Column(Storage="_RegionDescription", DBType="NChar(50) NOT NULL")]
    [DataObjectField(false, false, false, 50)]
    public string RegionDescription {
      get {
        return this._RegionDescription;
      }
      set {
        if ((this._RegionDescription != value)) {
          this.OnPropertyChanging("RegionDescription");
          this._RegionDescription = value;
          this.OnPropertyChanged("RegionDescription");
        }
      }
    }
    
    [Association(Name="FK_Territories_Region", Storage="_Territories", OtherKey="RegionID")]
    public EntitySet<Territory> Territories {
      get {
        return this._Territories;
      }
      set {
        this._Territories.Assign(value);
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    private void attach_Territories(Territory entity) {
      this.OnPropertyChanging(null);
      entity.Region = this;
      this.OnPropertyChanged(null);
    }
    
    private void detach_Territories(Territory entity) {
      this.OnPropertyChanging(null);
      entity.Region = null;
      this.OnPropertyChanged(null);
    }
  }
  
  [Table(Name="TextEntry")]
  public partial class TextEntry : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private int _ContentID;
    
    private System.Guid _ContentGUID;
    
    private string _Title;
    
    private string _ContentName;
    
    private string _Content;
    
    private string _IconPath;
    
    private System.Nullable<System.DateTime> _DateExpires;
    
    private string _LastEditedBy;
    
    private string _ExternalLink;
    
    private string _Status;
    
    private int _ListOrder;
    
    private string _CallOut;
    
    private System.Nullable<System.DateTime> _CreatedOn;
    
    private string _CreatedBy;
    
    private System.Nullable<System.DateTime> _ModifiedOn;
    
    private string _ModifiedBy;
    
    public TextEntry() {
    }
    
    [Column(Name="contentID", Storage="_ContentID", DBType="Int NOT NULL IDENTITY", Id=true, AutoGen=true)]
    [DataObjectField(true, true, false)]
    [Precision(Precision=10, Scale=255)]
    public int ContentID {
      get {
        return this._ContentID;
      }
      set {
        if ((this._ContentID != value)) {
          this.OnPropertyChanging("ContentID");
          this._ContentID = value;
          this.OnPropertyChanged("ContentID");
        }
      }
    }
    
    [Column(Name="contentGUID", Storage="_ContentGUID", DBType="UniqueIdentifier NOT NULL")]
    [DataObjectField(false, false, false)]
    public System.Guid ContentGUID {
      get {
        return this._ContentGUID;
      }
      set {
        if ((this._ContentGUID != value)) {
          this.OnPropertyChanging("ContentGUID");
          this._ContentGUID = value;
          this.OnPropertyChanged("ContentGUID");
        }
      }
    }
    
    [Column(Name="title", Storage="_Title", DBType="NVarChar(500)")]
    [DataObjectField(false, false, false, 500)]
    public string Title {
      get {
        return this._Title;
      }
      set {
        if ((this._Title != value)) {
          this.OnPropertyChanging("Title");
          this._Title = value;
          this.OnPropertyChanged("Title");
        }
      }
    }
    
    [Column(Name="contentName", Storage="_ContentName", DBType="NVarChar(50) NOT NULL")]
    [DataObjectField(false, false, false, 50)]
    public string ContentName {
      get {
        return this._ContentName;
      }
      set {
        if ((this._ContentName != value)) {
          this.OnPropertyChanging("ContentName");
          this._ContentName = value;
          this.OnPropertyChanged("ContentName");
        }
      }
    }
    
    [Column(Name="content", Storage="_Content", DBType="NVarChar(3000)")]
    [DataObjectField(false, false, false, 3000)]
    public string Content {
      get {
        return this._Content;
      }
      set {
        if ((this._Content != value)) {
          this.OnPropertyChanging("Content");
          this._Content = value;
          this.OnPropertyChanged("Content");
        }
      }
    }
    
    [Column(Name="iconPath", Storage="_IconPath", DBType="NVarChar(250)")]
    [DataObjectField(false, false, false, 250)]
    public string IconPath {
      get {
        return this._IconPath;
      }
      set {
        if ((this._IconPath != value)) {
          this.OnPropertyChanging("IconPath");
          this._IconPath = value;
          this.OnPropertyChanged("IconPath");
        }
      }
    }
    
    [Column(Name="dateExpires", Storage="_DateExpires", DBType="DateTime")]
    [DataObjectField(false, false, true)]
    public System.Nullable<System.DateTime> DateExpires {
      get {
        return this._DateExpires;
      }
      set {
        if ((this._DateExpires != value)) {
          this.OnPropertyChanging("DateExpires");
          this._DateExpires = value;
          this.OnPropertyChanged("DateExpires");
        }
      }
    }
    
    [Column(Name="lastEditedBy", Storage="_LastEditedBy", DBType="NVarChar(100)")]
    [DataObjectField(false, false, false, 100)]
    public string LastEditedBy {
      get {
        return this._LastEditedBy;
      }
      set {
        if ((this._LastEditedBy != value)) {
          this.OnPropertyChanging("LastEditedBy");
          this._LastEditedBy = value;
          this.OnPropertyChanged("LastEditedBy");
        }
      }
    }
    
    [Column(Name="externalLink", Storage="_ExternalLink", DBType="NVarChar(250)")]
    [DataObjectField(false, false, false, 250)]
    public string ExternalLink {
      get {
        return this._ExternalLink;
      }
      set {
        if ((this._ExternalLink != value)) {
          this.OnPropertyChanging("ExternalLink");
          this._ExternalLink = value;
          this.OnPropertyChanged("ExternalLink");
        }
      }
    }
    
    [Column(Name="status", Storage="_Status", DBType="NVarChar(50)")]
    [DataObjectField(false, false, false, 50)]
    public string Status {
      get {
        return this._Status;
      }
      set {
        if ((this._Status != value)) {
          this.OnPropertyChanging("Status");
          this._Status = value;
          this.OnPropertyChanged("Status");
        }
      }
    }
    
    [Column(Name="listOrder", Storage="_ListOrder", DBType="Int NOT NULL")]
    [DataObjectField(false, false, false)]
    [Precision(Precision=10, Scale=255)]
    public int ListOrder {
      get {
        return this._ListOrder;
      }
      set {
        if ((this._ListOrder != value)) {
          this.OnPropertyChanging("ListOrder");
          this._ListOrder = value;
          this.OnPropertyChanged("ListOrder");
        }
      }
    }
    
    [Column(Name="callOut", Storage="_CallOut", DBType="NVarChar(250)")]
    [DataObjectField(false, false, false, 250)]
    public string CallOut {
      get {
        return this._CallOut;
      }
      set {
        if ((this._CallOut != value)) {
          this.OnPropertyChanging("CallOut");
          this._CallOut = value;
          this.OnPropertyChanged("CallOut");
        }
      }
    }
    
    [Column(Name="createdOn", Storage="_CreatedOn", DBType="DateTime")]
    [DataObjectField(false, false, true)]
    public System.Nullable<System.DateTime> CreatedOn {
      get {
        return this._CreatedOn;
      }
      set {
        if ((this._CreatedOn != value)) {
          this.OnPropertyChanging("CreatedOn");
          this._CreatedOn = value;
          this.OnPropertyChanged("CreatedOn");
        }
      }
    }
    
    [Column(Name="createdBy", Storage="_CreatedBy", DBType="NVarChar(50)")]
    [DataObjectField(false, false, false, 50)]
    public string CreatedBy {
      get {
        return this._CreatedBy;
      }
      set {
        if ((this._CreatedBy != value)) {
          this.OnPropertyChanging("CreatedBy");
          this._CreatedBy = value;
          this.OnPropertyChanged("CreatedBy");
        }
      }
    }
    
    [Column(Name="modifiedOn", Storage="_ModifiedOn", DBType="DateTime")]
    [DataObjectField(false, false, true)]
    public System.Nullable<System.DateTime> ModifiedOn {
      get {
        return this._ModifiedOn;
      }
      set {
        if ((this._ModifiedOn != value)) {
          this.OnPropertyChanging("ModifiedOn");
          this._ModifiedOn = value;
          this.OnPropertyChanged("ModifiedOn");
        }
      }
    }
    
    [Column(Name="modifiedBy", Storage="_ModifiedBy", DBType="NVarChar(50)")]
    [DataObjectField(false, false, false, 50)]
    public string ModifiedBy {
      get {
        return this._ModifiedBy;
      }
      set {
        if ((this._ModifiedBy != value)) {
          this.OnPropertyChanging("ModifiedBy");
          this._ModifiedBy = value;
          this.OnPropertyChanged("ModifiedBy");
        }
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
  }
  
  [Table(Name="Employees")]
  public partial class Employee : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private int _EmployeeID;
    
    private string _LastName;
    
    private string _FirstName;
    
    private string _Title;
    
    private string _TitleOfCourtesy;
    
    private System.Nullable<System.DateTime> _BirthDate;
    
    private System.Nullable<System.DateTime> _HireDate;
    
    private string _Address;
    
    private string _City;
    
    private string _Region;
    
    private string _PostalCode;
    
    private string _Country;
    
    private string _HomePhone;
    
    private string _Extension;
    
    private byte[] _Photo;
    
    private string _Notes;
    
    private System.Nullable<int> _ReportsTo;
    
    private string _PhotoPath;
    
    private bool _Deleted;
    
    private EntityRef<Employee> _ReportsToEmployee;
    
    private EntitySet<Employee> _Employees;
    
    private EntitySet<EmployeeTerritory> _EmployeeTerritories;
    
    private EntitySet<Order> _Orders;
    
    public Employee() {
      this._ReportsToEmployee = default(EntityRef<Employee>);
      this._Employees = new EntitySet<Employee>(new Notification<Employee>(this.attach_Employees), new Notification<Employee>(this.detach_Employees));
      this._EmployeeTerritories = new EntitySet<EmployeeTerritory>(new Notification<EmployeeTerritory>(this.attach_EmployeeTerritories), new Notification<EmployeeTerritory>(this.detach_EmployeeTerritories));
      this._Orders = new EntitySet<Order>(new Notification<Order>(this.attach_Orders), new Notification<Order>(this.detach_Orders));
    }
    
    [Column(Storage="_EmployeeID", DBType="Int NOT NULL IDENTITY", Id=true, AutoGen=true)]
    [DataObjectField(true, true, false)]
    [Precision(Precision=10, Scale=255)]
    public int EmployeeID {
      get {
        return this._EmployeeID;
      }
      set {
        if ((this._EmployeeID != value)) {
          this.OnPropertyChanging("EmployeeID");
          this._EmployeeID = value;
          this.OnPropertyChanged("EmployeeID");
        }
      }
    }
    
    [Column(Storage="_LastName", DBType="NVarChar(20) NOT NULL")]
    [DataObjectField(false, false, false, 20)]
    public string LastName {
      get {
        return this._LastName;
      }
      set {
        if ((this._LastName != value)) {
          this.OnPropertyChanging("LastName");
          this._LastName = value;
          this.OnPropertyChanged("LastName");
        }
      }
    }
    
    [Column(Storage="_FirstName", DBType="NVarChar(10) NOT NULL")]
    [DataObjectField(false, false, false, 10)]
    public string FirstName {
      get {
        return this._FirstName;
      }
      set {
        if ((this._FirstName != value)) {
          this.OnPropertyChanging("FirstName");
          this._FirstName = value;
          this.OnPropertyChanged("FirstName");
        }
      }
    }
    
    [Column(Storage="_Title", DBType="NVarChar(30)")]
    [DataObjectField(false, false, false, 30)]
    public string Title {
      get {
        return this._Title;
      }
      set {
        if ((this._Title != value)) {
          this.OnPropertyChanging("Title");
          this._Title = value;
          this.OnPropertyChanged("Title");
        }
      }
    }
    
    [Column(Storage="_TitleOfCourtesy", DBType="NVarChar(25)")]
    [DataObjectField(false, false, false, 25)]
    public string TitleOfCourtesy {
      get {
        return this._TitleOfCourtesy;
      }
      set {
        if ((this._TitleOfCourtesy != value)) {
          this.OnPropertyChanging("TitleOfCourtesy");
          this._TitleOfCourtesy = value;
          this.OnPropertyChanged("TitleOfCourtesy");
        }
      }
    }
    
    [Column(Storage="_BirthDate", DBType="DateTime")]
    [DataObjectField(false, false, true)]
    public System.Nullable<System.DateTime> BirthDate {
      get {
        return this._BirthDate;
      }
      set {
        if ((this._BirthDate != value)) {
          this.OnPropertyChanging("BirthDate");
          this._BirthDate = value;
          this.OnPropertyChanged("BirthDate");
        }
      }
    }
    
    [Column(Storage="_HireDate", DBType="DateTime")]
    [DataObjectField(false, false, true)]
    public System.Nullable<System.DateTime> HireDate {
      get {
        return this._HireDate;
      }
      set {
        if ((this._HireDate != value)) {
          this.OnPropertyChanging("HireDate");
          this._HireDate = value;
          this.OnPropertyChanged("HireDate");
        }
      }
    }
    
    [Column(Storage="_Address", DBType="NVarChar(60)")]
    [DataObjectField(false, false, false, 60)]
    public string Address {
      get {
        return this._Address;
      }
      set {
        if ((this._Address != value)) {
          this.OnPropertyChanging("Address");
          this._Address = value;
          this.OnPropertyChanged("Address");
        }
      }
    }
    
    [Column(Storage="_City", DBType="NVarChar(15)")]
    [DataObjectField(false, false, false, 15)]
    public string City {
      get {
        return this._City;
      }
      set {
        if ((this._City != value)) {
          this.OnPropertyChanging("City");
          this._City = value;
          this.OnPropertyChanged("City");
        }
      }
    }
    
    [Column(Storage="_Region", DBType="NVarChar(15)")]
    [DataObjectField(false, false, false, 15)]
    public string Region {
      get {
        return this._Region;
      }
      set {
        if ((this._Region != value)) {
          this.OnPropertyChanging("Region");
          this._Region = value;
          this.OnPropertyChanged("Region");
        }
      }
    }
    
    [Column(Storage="_PostalCode", DBType="NVarChar(10)")]
    [DataObjectField(false, false, false, 10)]
    public string PostalCode {
      get {
        return this._PostalCode;
      }
      set {
        if ((this._PostalCode != value)) {
          this.OnPropertyChanging("PostalCode");
          this._PostalCode = value;
          this.OnPropertyChanged("PostalCode");
        }
      }
    }
    
    [Column(Storage="_Country", DBType="NVarChar(15)")]
    [DataObjectField(false, false, false, 15)]
    public string Country {
      get {
        return this._Country;
      }
      set {
        if ((this._Country != value)) {
          this.OnPropertyChanging("Country");
          this._Country = value;
          this.OnPropertyChanged("Country");
        }
      }
    }
    
    [Column(Storage="_HomePhone", DBType="NVarChar(24)")]
    [DataObjectField(false, false, false, 24)]
    public string HomePhone {
      get {
        return this._HomePhone;
      }
      set {
        if ((this._HomePhone != value)) {
          this.OnPropertyChanging("HomePhone");
          this._HomePhone = value;
          this.OnPropertyChanged("HomePhone");
        }
      }
    }
    
    [Column(Storage="_Extension", DBType="NVarChar(4)")]
    [DataObjectField(false, false, false, 4)]
    public string Extension {
      get {
        return this._Extension;
      }
      set {
        if ((this._Extension != value)) {
          this.OnPropertyChanging("Extension");
          this._Extension = value;
          this.OnPropertyChanged("Extension");
        }
      }
    }
    
    [Column(Storage="_Photo", DBType="Image", UpdateCheck=System.Data.DLinq.UpdateCheck.Never)]
    [DataObjectField(false, false, false)]
    public byte[] Photo {
      get {
        return this._Photo;
      }
      set {
        if ((this._Photo != value)) {
          this.OnPropertyChanging("Photo");
          this._Photo = value;
          this.OnPropertyChanged("Photo");
        }
      }
    }
    
    [Column(Storage="_Notes", DBType="NText", UpdateCheck=System.Data.DLinq.UpdateCheck.Never)]
    [DataObjectField(false, false, false, 1073741823)]
    public string Notes {
      get {
        return this._Notes;
      }
      set {
        if ((this._Notes != value)) {
          this.OnPropertyChanging("Notes");
          this._Notes = value;
          this.OnPropertyChanged("Notes");
        }
      }
    }
    
    [Column(Storage="_ReportsTo", DBType="Int")]
    [DataObjectField(false, false, true)]
    [Precision(Precision=10, Scale=255)]
    public System.Nullable<int> ReportsTo {
      get {
        return this._ReportsTo;
      }
      set {
        if ((this._ReportsTo != value)) {
          this.OnPropertyChanging("ReportsTo");
          this._ReportsTo = value;
          this.OnPropertyChanged("ReportsTo");
        }
      }
    }
    
    [Column(Storage="_PhotoPath", DBType="NVarChar(255)")]
    [DataObjectField(false, false, false, 255)]
    public string PhotoPath {
      get {
        return this._PhotoPath;
      }
      set {
        if ((this._PhotoPath != value)) {
          this.OnPropertyChanging("PhotoPath");
          this._PhotoPath = value;
          this.OnPropertyChanged("PhotoPath");
        }
      }
    }
    
    [Column(Storage="_Deleted", DBType="Bit NOT NULL")]
    [DataObjectField(false, false, false)]
    public bool Deleted {
      get {
        return this._Deleted;
      }
      set {
        if ((this._Deleted != value)) {
          this.OnPropertyChanging("Deleted");
          this._Deleted = value;
          this.OnPropertyChanged("Deleted");
        }
      }
    }
    
    [Association(Name="FK_Employees_Employees", Storage="_ReportsToEmployee", ThisKey="ReportsTo", IsParent=true)]
    public Employee ReportsToEmployee {
      get {
        return this._ReportsToEmployee.Entity;
      }
      set {
        Employee v = this._ReportsToEmployee.Entity;
        if ((v != value)) {
          this.OnPropertyChanging("ReportsToEmployee");
          if ((v != null)) {
            this._ReportsToEmployee.Entity = null;
            v.Employees.Remove(this);
          }
          this._ReportsToEmployee.Entity = value;
          if ((value != null)) {
            value.Employees.Add(this);
          }
          this.OnPropertyChanged("ReportsToEmployee");
        }
      }
    }
    
    [Association(Name="FK_Employees_Employees", Storage="_Employees", OtherKey="ReportsTo")]
    public EntitySet<Employee> Employees {
      get {
        return this._Employees;
      }
      set {
        this._Employees.Assign(value);
      }
    }
    
    [Association(Name="FK_EmployeeTerritories_Employees", Storage="_EmployeeTerritories", OtherKey="EmployeeID")]
    public EntitySet<EmployeeTerritory> EmployeeTerritories {
      get {
        return this._EmployeeTerritories;
      }
      set {
        this._EmployeeTerritories.Assign(value);
      }
    }
    
    [Association(Name="FK_Orders_Employees", Storage="_Orders", OtherKey="EmployeeID")]
    public EntitySet<Order> Orders {
      get {
        return this._Orders;
      }
      set {
        this._Orders.Assign(value);
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    private void attach_Employees(Employee entity) {
      this.OnPropertyChanging(null);
      entity.ReportsToEmployee = this;
      this.OnPropertyChanged(null);
    }
    
    private void detach_Employees(Employee entity) {
      this.OnPropertyChanging(null);
      entity.ReportsToEmployee = null;
      this.OnPropertyChanged(null);
    }
    
    private void attach_EmployeeTerritories(EmployeeTerritory entity) {
      this.OnPropertyChanging(null);
      entity.Employee = this;
      this.OnPropertyChanged(null);
    }
    
    private void detach_EmployeeTerritories(EmployeeTerritory entity) {
      this.OnPropertyChanging(null);
      entity.Employee = null;
      this.OnPropertyChanged(null);
    }
    
    private void attach_Orders(Order entity) {
      this.OnPropertyChanging(null);
      entity.Employee = this;
      this.OnPropertyChanged(null);
    }
    
    private void detach_Orders(Order entity) {
      this.OnPropertyChanging(null);
      entity.Employee = null;
      this.OnPropertyChanged(null);
    }
  }
  
  [Table(Name="Categories")]
  public partial class Category : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private int _CategoryID;
    
    private string _CategoryName;
    
    private string _Description;
    
    private byte[] _Picture;
    
    private EntitySet<ProductCategoryMap> _ProductCategoryMaps;
    
    private EntitySet<Product> _Products;
    
    public Category() {
      this._ProductCategoryMaps = new EntitySet<ProductCategoryMap>(new Notification<ProductCategoryMap>(this.attach_ProductCategoryMaps), new Notification<ProductCategoryMap>(this.detach_ProductCategoryMaps));
      this._Products = new EntitySet<Product>(new Notification<Product>(this.attach_Products), new Notification<Product>(this.detach_Products));
    }
    
    [Column(Storage="_CategoryID", DBType="Int NOT NULL IDENTITY", Id=true, AutoGen=true)]
    [DataObjectField(true, true, false)]
    [Precision(Precision=10, Scale=255)]
    public int CategoryID {
      get {
        return this._CategoryID;
      }
      set {
        if ((this._CategoryID != value)) {
          this.OnPropertyChanging("CategoryID");
          this._CategoryID = value;
          this.OnPropertyChanged("CategoryID");
        }
      }
    }
    
    [Column(Storage="_CategoryName", DBType="NVarChar(15) NOT NULL")]
    [DataObjectField(false, false, false, 15)]
    public string CategoryName {
      get {
        return this._CategoryName;
      }
      set {
        if ((this._CategoryName != value)) {
          this.OnPropertyChanging("CategoryName");
          this._CategoryName = value;
          this.OnPropertyChanged("CategoryName");
        }
      }
    }
    
    [Column(Storage="_Description", DBType="NText", UpdateCheck=System.Data.DLinq.UpdateCheck.Never)]
    [DataObjectField(false, false, false, 1073741823)]
    public string Description {
      get {
        return this._Description;
      }
      set {
        if ((this._Description != value)) {
          this.OnPropertyChanging("Description");
          this._Description = value;
          this.OnPropertyChanged("Description");
        }
      }
    }
    
    [Column(Storage="_Picture", DBType="Image", UpdateCheck=System.Data.DLinq.UpdateCheck.Never)]
    [DataObjectField(false, false, false)]
    public byte[] Picture {
      get {
        return this._Picture;
      }
      set {
        if ((this._Picture != value)) {
          this.OnPropertyChanging("Picture");
          this._Picture = value;
          this.OnPropertyChanged("Picture");
        }
      }
    }
    
    [Association(Name="FK_Product_Category_Map_Categories", Storage="_ProductCategoryMaps", OtherKey="CategoryID")]
    public EntitySet<ProductCategoryMap> ProductCategoryMaps {
      get {
        return this._ProductCategoryMaps;
      }
      set {
        this._ProductCategoryMaps.Assign(value);
      }
    }
    
    [Association(Name="FK_Products_Categories", Storage="_Products", OtherKey="CategoryID")]
    public EntitySet<Product> Products {
      get {
        return this._Products;
      }
      set {
        this._Products.Assign(value);
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    private void attach_ProductCategoryMaps(ProductCategoryMap entity) {
      this.OnPropertyChanging(null);
      entity.Category = this;
      this.OnPropertyChanged(null);
    }
    
    private void detach_ProductCategoryMaps(ProductCategoryMap entity) {
      this.OnPropertyChanging(null);
      entity.Category = null;
      this.OnPropertyChanged(null);
    }
    
    private void attach_Products(Product entity) {
      this.OnPropertyChanging(null);
      entity.Category = this;
      this.OnPropertyChanged(null);
    }
    
    private void detach_Products(Product entity) {
      this.OnPropertyChanging(null);
      entity.Category = null;
      this.OnPropertyChanged(null);
    }
  }
  
  [Table(Name="Customers")]
  public partial class Customer : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private string _CustomerID;
    
    private string _CompanyName;
    
    private string _ContactName;
    
    private string _ContactTitle;
    
    private string _Address;
    
    private string _City;
    
    private string _Region;
    
    private string _PostalCode;
    
    private string _Country;
    
    private string _Phone;
    
    private string _Fax;
    
    private EntitySet<CustomerCustomerDemo> _CustomerCustomerDemos;
    
    private EntitySet<Order> _Orders;
    
    public Customer() {
      this._CustomerCustomerDemos = new EntitySet<CustomerCustomerDemo>(new Notification<CustomerCustomerDemo>(this.attach_CustomerCustomerDemos), new Notification<CustomerCustomerDemo>(this.detach_CustomerCustomerDemos));
      this._Orders = new EntitySet<Order>(new Notification<Order>(this.attach_Orders), new Notification<Order>(this.detach_Orders));
    }
    
    [Column(Storage="_CustomerID", DBType="NChar(5) NOT NULL", Id=true)]
    [DataObjectField(true, false, false, 5)]
    public string CustomerID {
      get {
        return this._CustomerID;
      }
      set {
        if ((this._CustomerID != value)) {
          this.OnPropertyChanging("CustomerID");
          this._CustomerID = value;
          this.OnPropertyChanged("CustomerID");
        }
      }
    }
    
    [Column(Storage="_CompanyName", DBType="NVarChar(40) NOT NULL")]
    [DataObjectField(false, false, false, 40)]
    public string CompanyName {
      get {
        return this._CompanyName;
      }
      set {
        if ((this._CompanyName != value)) {
          this.OnPropertyChanging("CompanyName");
          this._CompanyName = value;
          this.OnPropertyChanged("CompanyName");
        }
      }
    }
    
    [Column(Storage="_ContactName", DBType="NVarChar(30)")]
    [DataObjectField(false, false, false, 30)]
    public string ContactName {
      get {
        return this._ContactName;
      }
      set {
        if ((this._ContactName != value)) {
          this.OnPropertyChanging("ContactName");
          this._ContactName = value;
          this.OnPropertyChanged("ContactName");
        }
      }
    }
    
    [Column(Storage="_ContactTitle", DBType="NVarChar(30)")]
    [DataObjectField(false, false, false, 30)]
    public string ContactTitle {
      get {
        return this._ContactTitle;
      }
      set {
        if ((this._ContactTitle != value)) {
          this.OnPropertyChanging("ContactTitle");
          this._ContactTitle = value;
          this.OnPropertyChanged("ContactTitle");
        }
      }
    }
    
    [Column(Storage="_Address", DBType="NVarChar(60)")]
    [DataObjectField(false, false, false, 60)]
    public string Address {
      get {
        return this._Address;
      }
      set {
        if ((this._Address != value)) {
          this.OnPropertyChanging("Address");
          this._Address = value;
          this.OnPropertyChanged("Address");
        }
      }
    }
    
    [Column(Storage="_City", DBType="NVarChar(15)")]
    [DataObjectField(false, false, false, 15)]
    public string City {
      get {
        return this._City;
      }
      set {
        if ((this._City != value)) {
          this.OnPropertyChanging("City");
          this._City = value;
          this.OnPropertyChanged("City");
        }
      }
    }
    
    [Column(Storage="_Region", DBType="NVarChar(15)")]
    [DataObjectField(false, false, false, 15)]
    public string Region {
      get {
        return this._Region;
      }
      set {
        if ((this._Region != value)) {
          this.OnPropertyChanging("Region");
          this._Region = value;
          this.OnPropertyChanged("Region");
        }
      }
    }
    
    [Column(Storage="_PostalCode", DBType="NVarChar(10)")]
    [DataObjectField(false, false, false, 10)]
    public string PostalCode {
      get {
        return this._PostalCode;
      }
      set {
        if ((this._PostalCode != value)) {
          this.OnPropertyChanging("PostalCode");
          this._PostalCode = value;
          this.OnPropertyChanged("PostalCode");
        }
      }
    }
    
    [Column(Storage="_Country", DBType="NVarChar(15)")]
    [DataObjectField(false, false, false, 15)]
    public string Country {
      get {
        return this._Country;
      }
      set {
        if ((this._Country != value)) {
          this.OnPropertyChanging("Country");
          this._Country = value;
          this.OnPropertyChanged("Country");
        }
      }
    }
    
    [Column(Storage="_Phone", DBType="NVarChar(24)")]
    [DataObjectField(false, false, false, 24)]
    public string Phone {
      get {
        return this._Phone;
      }
      set {
        if ((this._Phone != value)) {
          this.OnPropertyChanging("Phone");
          this._Phone = value;
          this.OnPropertyChanged("Phone");
        }
      }
    }
    
    [Column(Storage="_Fax", DBType="NVarChar(24)")]
    [DataObjectField(false, false, false, 24)]
    public string Fax {
      get {
        return this._Fax;
      }
      set {
        if ((this._Fax != value)) {
          this.OnPropertyChanging("Fax");
          this._Fax = value;
          this.OnPropertyChanged("Fax");
        }
      }
    }
    
    [Association(Name="FK_CustomerCustomerDemo_Customers", Storage="_CustomerCustomerDemos", OtherKey="CustomerID")]
    public EntitySet<CustomerCustomerDemo> CustomerCustomerDemos {
      get {
        return this._CustomerCustomerDemos;
      }
      set {
        this._CustomerCustomerDemos.Assign(value);
      }
    }
    
    [Association(Name="FK_Orders_Customers", Storage="_Orders", OtherKey="CustomerID")]
    public EntitySet<Order> Orders {
      get {
        return this._Orders;
      }
      set {
        this._Orders.Assign(value);
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    private void attach_CustomerCustomerDemos(CustomerCustomerDemo entity) {
      this.OnPropertyChanging(null);
      entity.Customer = this;
      this.OnPropertyChanged(null);
    }
    
    private void detach_CustomerCustomerDemos(CustomerCustomerDemo entity) {
      this.OnPropertyChanging(null);
      entity.Customer = null;
      this.OnPropertyChanged(null);
    }
    
    private void attach_Orders(Order entity) {
      this.OnPropertyChanging(null);
      entity.Customer = this;
      this.OnPropertyChanged(null);
    }
    
    private void detach_Orders(Order entity) {
      this.OnPropertyChanging(null);
      entity.Customer = null;
      this.OnPropertyChanged(null);
    }
  }
  
  [Table(Name="Suppliers")]
  public partial class Supplier : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private int _SupplierID;
    
    private string _CompanyName;
    
    private string _ContactName;
    
    private string _ContactTitle;
    
    private string _Address;
    
    private string _City;
    
    private string _Region;
    
    private string _PostalCode;
    
    private string _Country;
    
    private string _Phone;
    
    private string _Fax;
    
    private string _HomePage;
    
    private EntitySet<Product> _Products;
    
    public Supplier() {
      this._Products = new EntitySet<Product>(new Notification<Product>(this.attach_Products), new Notification<Product>(this.detach_Products));
    }
    
    [Column(Storage="_SupplierID", DBType="Int NOT NULL IDENTITY", Id=true, AutoGen=true)]
    [DataObjectField(true, true, false)]
    [Precision(Precision=10, Scale=255)]
    public int SupplierID {
      get {
        return this._SupplierID;
      }
      set {
        if ((this._SupplierID != value)) {
          this.OnPropertyChanging("SupplierID");
          this._SupplierID = value;
          this.OnPropertyChanged("SupplierID");
        }
      }
    }
    
    [Column(Storage="_CompanyName", DBType="NVarChar(40) NOT NULL")]
    [DataObjectField(false, false, false, 40)]
    public string CompanyName {
      get {
        return this._CompanyName;
      }
      set {
        if ((this._CompanyName != value)) {
          this.OnPropertyChanging("CompanyName");
          this._CompanyName = value;
          this.OnPropertyChanged("CompanyName");
        }
      }
    }
    
    [Column(Storage="_ContactName", DBType="NVarChar(30)")]
    [DataObjectField(false, false, false, 30)]
    public string ContactName {
      get {
        return this._ContactName;
      }
      set {
        if ((this._ContactName != value)) {
          this.OnPropertyChanging("ContactName");
          this._ContactName = value;
          this.OnPropertyChanged("ContactName");
        }
      }
    }
    
    [Column(Storage="_ContactTitle", DBType="NVarChar(30)")]
    [DataObjectField(false, false, false, 30)]
    public string ContactTitle {
      get {
        return this._ContactTitle;
      }
      set {
        if ((this._ContactTitle != value)) {
          this.OnPropertyChanging("ContactTitle");
          this._ContactTitle = value;
          this.OnPropertyChanged("ContactTitle");
        }
      }
    }
    
    [Column(Storage="_Address", DBType="NVarChar(60)")]
    [DataObjectField(false, false, false, 60)]
    public string Address {
      get {
        return this._Address;
      }
      set {
        if ((this._Address != value)) {
          this.OnPropertyChanging("Address");
          this._Address = value;
          this.OnPropertyChanged("Address");
        }
      }
    }
    
    [Column(Storage="_City", DBType="NVarChar(15)")]
    [DataObjectField(false, false, false, 15)]
    public string City {
      get {
        return this._City;
      }
      set {
        if ((this._City != value)) {
          this.OnPropertyChanging("City");
          this._City = value;
          this.OnPropertyChanged("City");
        }
      }
    }
    
    [Column(Storage="_Region", DBType="NVarChar(15)")]
    [DataObjectField(false, false, false, 15)]
    public string Region {
      get {
        return this._Region;
      }
      set {
        if ((this._Region != value)) {
          this.OnPropertyChanging("Region");
          this._Region = value;
          this.OnPropertyChanged("Region");
        }
      }
    }
    
    [Column(Storage="_PostalCode", DBType="NVarChar(10)")]
    [DataObjectField(false, false, false, 10)]
    public string PostalCode {
      get {
        return this._PostalCode;
      }
      set {
        if ((this._PostalCode != value)) {
          this.OnPropertyChanging("PostalCode");
          this._PostalCode = value;
          this.OnPropertyChanged("PostalCode");
        }
      }
    }
    
    [Column(Storage="_Country", DBType="NVarChar(15)")]
    [DataObjectField(false, false, false, 15)]
    public string Country {
      get {
        return this._Country;
      }
      set {
        if ((this._Country != value)) {
          this.OnPropertyChanging("Country");
          this._Country = value;
          this.OnPropertyChanged("Country");
        }
      }
    }
    
    [Column(Storage="_Phone", DBType="NVarChar(24)")]
    [DataObjectField(false, false, false, 24)]
    public string Phone {
      get {
        return this._Phone;
      }
      set {
        if ((this._Phone != value)) {
          this.OnPropertyChanging("Phone");
          this._Phone = value;
          this.OnPropertyChanged("Phone");
        }
      }
    }
    
    [Column(Storage="_Fax", DBType="NVarChar(24)")]
    [DataObjectField(false, false, false, 24)]
    public string Fax {
      get {
        return this._Fax;
      }
      set {
        if ((this._Fax != value)) {
          this.OnPropertyChanging("Fax");
          this._Fax = value;
          this.OnPropertyChanged("Fax");
        }
      }
    }
    
    [Column(Storage="_HomePage", DBType="NText", UpdateCheck=System.Data.DLinq.UpdateCheck.Never)]
    [DataObjectField(false, false, false, 1073741823)]
    public string HomePage {
      get {
        return this._HomePage;
      }
      set {
        if ((this._HomePage != value)) {
          this.OnPropertyChanging("HomePage");
          this._HomePage = value;
          this.OnPropertyChanged("HomePage");
        }
      }
    }
    
    [Association(Name="FK_Products_Suppliers", Storage="_Products", OtherKey="SupplierID")]
    public EntitySet<Product> Products {
      get {
        return this._Products;
      }
      set {
        this._Products.Assign(value);
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    private void attach_Products(Product entity) {
      this.OnPropertyChanging(null);
      entity.Supplier = this;
      this.OnPropertyChanged(null);
    }
    
    private void detach_Products(Product entity) {
      this.OnPropertyChanging(null);
      entity.Supplier = null;
      this.OnPropertyChanged(null);
    }
  }
  
  [Table(Name="Product_Category_Map")]
  public partial class ProductCategoryMap : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private int _CategoryID;
    
    private int _ProductID;
    
    private EntityRef<Category> _Category;
    
    private EntityRef<Product> _Product;
    
    public ProductCategoryMap() {
      this._Category = default(EntityRef<Category>);
      this._Product = default(EntityRef<Product>);
    }
    
    [Column(Storage="_CategoryID", DBType="Int NOT NULL", Id=true)]
    [DataObjectField(true, false, false)]
    [Precision(Precision=10, Scale=255)]
    public int CategoryID {
      get {
        return this._CategoryID;
      }
      set {
        if ((this._CategoryID != value)) {
          this.OnPropertyChanging("CategoryID");
          this._CategoryID = value;
          this.OnPropertyChanged("CategoryID");
        }
      }
    }
    
    [Column(Storage="_ProductID", DBType="Int NOT NULL", Id=true)]
    [DataObjectField(true, false, false)]
    [Precision(Precision=10, Scale=255)]
    public int ProductID {
      get {
        return this._ProductID;
      }
      set {
        if ((this._ProductID != value)) {
          this.OnPropertyChanging("ProductID");
          this._ProductID = value;
          this.OnPropertyChanged("ProductID");
        }
      }
    }
    
    [Association(Name="FK_Product_Category_Map_Categories", Storage="_Category", ThisKey="CategoryID", IsParent=true)]
    public Category Category {
      get {
        return this._Category.Entity;
      }
      set {
        Category v = this._Category.Entity;
        if ((v != value)) {
          this.OnPropertyChanging("Category");
          if ((v != null)) {
            this._Category.Entity = null;
            v.ProductCategoryMaps.Remove(this);
          }
          this._Category.Entity = value;
          if ((value != null)) {
            value.ProductCategoryMaps.Add(this);
          }
          this.OnPropertyChanged("Category");
        }
      }
    }
    
    [Association(Name="FK_Product_Category_Map_Products", Storage="_Product", ThisKey="ProductID", IsParent=true)]
    public Product Product {
      get {
        return this._Product.Entity;
      }
      set {
        Product v = this._Product.Entity;
        if ((v != value)) {
          this.OnPropertyChanging("Product");
          if ((v != null)) {
            this._Product.Entity = null;
            v.ProductCategoryMaps.Remove(this);
          }
          this._Product.Entity = value;
          if ((value != null)) {
            value.ProductCategoryMaps.Add(this);
          }
          this.OnPropertyChanged("Product");
        }
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
  }
  
  [Table(Name="CustomerCustomerDemo")]
  public partial class CustomerCustomerDemo : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private string _CustomerID;
    
    private string _CustomerTypeID;
    
    private EntityRef<CustomerDemographic> _CustomerDemographic;
    
    private EntityRef<Customer> _Customer;
    
    public CustomerCustomerDemo() {
      this._CustomerDemographic = default(EntityRef<CustomerDemographic>);
      this._Customer = default(EntityRef<Customer>);
    }
    
    [Column(Storage="_CustomerID", DBType="NChar(5) NOT NULL", Id=true)]
    [DataObjectField(true, false, false, 5)]
    public string CustomerID {
      get {
        return this._CustomerID;
      }
      set {
        if ((this._CustomerID != value)) {
          this.OnPropertyChanging("CustomerID");
          this._CustomerID = value;
          this.OnPropertyChanged("CustomerID");
        }
      }
    }
    
    [Column(Storage="_CustomerTypeID", DBType="NChar(10) NOT NULL", Id=true)]
    [DataObjectField(true, false, false, 10)]
    public string CustomerTypeID {
      get {
        return this._CustomerTypeID;
      }
      set {
        if ((this._CustomerTypeID != value)) {
          this.OnPropertyChanging("CustomerTypeID");
          this._CustomerTypeID = value;
          this.OnPropertyChanged("CustomerTypeID");
        }
      }
    }
    
    [Association(Name="FK_CustomerCustomerDemo", Storage="_CustomerDemographic", ThisKey="CustomerTypeID", IsParent=true)]
    public CustomerDemographic CustomerDemographic {
      get {
        return this._CustomerDemographic.Entity;
      }
      set {
        CustomerDemographic v = this._CustomerDemographic.Entity;
        if ((v != value)) {
          this.OnPropertyChanging("CustomerDemographic");
          if ((v != null)) {
            this._CustomerDemographic.Entity = null;
            v.CustomerCustomerDemos.Remove(this);
          }
          this._CustomerDemographic.Entity = value;
          if ((value != null)) {
            value.CustomerCustomerDemos.Add(this);
          }
          this.OnPropertyChanged("CustomerDemographic");
        }
      }
    }
    
    [Association(Name="FK_CustomerCustomerDemo_Customers", Storage="_Customer", ThisKey="CustomerID", IsParent=true)]
    public Customer Customer {
      get {
        return this._Customer.Entity;
      }
      set {
        Customer v = this._Customer.Entity;
        if ((v != value)) {
          this.OnPropertyChanging("Customer");
          if ((v != null)) {
            this._Customer.Entity = null;
            v.CustomerCustomerDemos.Remove(this);
          }
          this._Customer.Entity = value;
          if ((value != null)) {
            value.CustomerCustomerDemos.Add(this);
          }
          this.OnPropertyChanged("Customer");
        }
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
  }
  
  [Table(Name="Territories")]
  public partial class Territory : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private string _TerritoryID;
    
    private string _TerritoryDescription;
    
    private int _RegionID;
    
    private EntitySet<EmployeeTerritory> _EmployeeTerritories;
    
    private EntityRef<Region> _Region;
    
    public Territory() {
      this._EmployeeTerritories = new EntitySet<EmployeeTerritory>(new Notification<EmployeeTerritory>(this.attach_EmployeeTerritories), new Notification<EmployeeTerritory>(this.detach_EmployeeTerritories));
      this._Region = default(EntityRef<Region>);
    }
    
    [Column(Storage="_TerritoryID", DBType="NVarChar(20) NOT NULL", Id=true)]
    [DataObjectField(true, false, false, 20)]
    public string TerritoryID {
      get {
        return this._TerritoryID;
      }
      set {
        if ((this._TerritoryID != value)) {
          this.OnPropertyChanging("TerritoryID");
          this._TerritoryID = value;
          this.OnPropertyChanged("TerritoryID");
        }
      }
    }
    
    [Column(Storage="_TerritoryDescription", DBType="NChar(50) NOT NULL")]
    [DataObjectField(false, false, false, 50)]
    public string TerritoryDescription {
      get {
        return this._TerritoryDescription;
      }
      set {
        if ((this._TerritoryDescription != value)) {
          this.OnPropertyChanging("TerritoryDescription");
          this._TerritoryDescription = value;
          this.OnPropertyChanged("TerritoryDescription");
        }
      }
    }
    
    [Column(Storage="_RegionID", DBType="Int NOT NULL")]
    [DataObjectField(false, false, false)]
    [Precision(Precision=10, Scale=255)]
    public int RegionID {
      get {
        return this._RegionID;
      }
      set {
        if ((this._RegionID != value)) {
          this.OnPropertyChanging("RegionID");
          this._RegionID = value;
          this.OnPropertyChanged("RegionID");
        }
      }
    }
    
    [Association(Name="FK_EmployeeTerritories_Territories", Storage="_EmployeeTerritories", OtherKey="TerritoryID")]
    public EntitySet<EmployeeTerritory> EmployeeTerritories {
      get {
        return this._EmployeeTerritories;
      }
      set {
        this._EmployeeTerritories.Assign(value);
      }
    }
    
    [Association(Name="FK_Territories_Region", Storage="_Region", ThisKey="RegionID", IsParent=true)]
    public Region Region {
      get {
        return this._Region.Entity;
      }
      set {
        Region v = this._Region.Entity;
        if ((v != value)) {
          this.OnPropertyChanging("Region");
          if ((v != null)) {
            this._Region.Entity = null;
            v.Territories.Remove(this);
          }
          this._Region.Entity = value;
          if ((value != null)) {
            value.Territories.Add(this);
          }
          this.OnPropertyChanged("Region");
        }
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    private void attach_EmployeeTerritories(EmployeeTerritory entity) {
      this.OnPropertyChanging(null);
      entity.Territory = this;
      this.OnPropertyChanged(null);
    }
    
    private void detach_EmployeeTerritories(EmployeeTerritory entity) {
      this.OnPropertyChanging(null);
      entity.Territory = null;
      this.OnPropertyChanged(null);
    }
  }
  
  [Table(Name="EmployeeTerritories")]
  public partial class EmployeeTerritory : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private int _EmployeeID;
    
    private string _TerritoryID;
    
    private EntityRef<Employee> _Employee;
    
    private EntityRef<Territory> _Territory;
    
    public EmployeeTerritory() {
      this._Employee = default(EntityRef<Employee>);
      this._Territory = default(EntityRef<Territory>);
    }
    
    [Column(Storage="_EmployeeID", DBType="Int NOT NULL", Id=true)]
    [DataObjectField(true, false, false)]
    [Precision(Precision=10, Scale=255)]
    public int EmployeeID {
      get {
        return this._EmployeeID;
      }
      set {
        if ((this._EmployeeID != value)) {
          this.OnPropertyChanging("EmployeeID");
          this._EmployeeID = value;
          this.OnPropertyChanged("EmployeeID");
        }
      }
    }
    
    [Column(Storage="_TerritoryID", DBType="NVarChar(20) NOT NULL", Id=true)]
    [DataObjectField(true, false, false, 20)]
    public string TerritoryID {
      get {
        return this._TerritoryID;
      }
      set {
        if ((this._TerritoryID != value)) {
          this.OnPropertyChanging("TerritoryID");
          this._TerritoryID = value;
          this.OnPropertyChanged("TerritoryID");
        }
      }
    }
    
    [Association(Name="FK_EmployeeTerritories_Employees", Storage="_Employee", ThisKey="EmployeeID", IsParent=true)]
    public Employee Employee {
      get {
        return this._Employee.Entity;
      }
      set {
        Employee v = this._Employee.Entity;
        if ((v != value)) {
          this.OnPropertyChanging("Employee");
          if ((v != null)) {
            this._Employee.Entity = null;
            v.EmployeeTerritories.Remove(this);
          }
          this._Employee.Entity = value;
          if ((value != null)) {
            value.EmployeeTerritories.Add(this);
          }
          this.OnPropertyChanged("Employee");
        }
      }
    }
    
    [Association(Name="FK_EmployeeTerritories_Territories", Storage="_Territory", ThisKey="TerritoryID", IsParent=true)]
    public Territory Territory {
      get {
        return this._Territory.Entity;
      }
      set {
        Territory v = this._Territory.Entity;
        if ((v != value)) {
          this.OnPropertyChanging("Territory");
          if ((v != null)) {
            this._Territory.Entity = null;
            v.EmployeeTerritories.Remove(this);
          }
          this._Territory.Entity = value;
          if ((value != null)) {
            value.EmployeeTerritories.Add(this);
          }
          this.OnPropertyChanged("Territory");
        }
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
  }
  
  [Table(Name="Products")]
  public partial class Product : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private int _ProductID;
    
    private string _ProductName;
    
    private System.Nullable<int> _SupplierID;
    
    private System.Nullable<int> _CategoryID;
    
    private string _QuantityPerUnit;
    
    private System.Nullable<decimal> _UnitPrice;
    
    private System.Nullable<short> _UnitsInStock;
    
    private System.Nullable<short> _UnitsOnOrder;
    
    private System.Nullable<short> _ReorderLevel;
    
    private bool _Discontinued;
    
    private string _AttributeXML;
    
    private System.Nullable<System.DateTime> _DateCreated;
    
    private System.Nullable<System.Guid> _ProductGUID;
    
    private EntitySet<OrderDetail> _OrderDetails;
    
    private EntitySet<ProductCategoryMap> _ProductCategoryMaps;
    
    private EntityRef<Category> _Category;
    
    private EntityRef<Supplier> _Supplier;
    
    public Product() {
      this._OrderDetails = new EntitySet<OrderDetail>(new Notification<OrderDetail>(this.attach_OrderDetails), new Notification<OrderDetail>(this.detach_OrderDetails));
      this._ProductCategoryMaps = new EntitySet<ProductCategoryMap>(new Notification<ProductCategoryMap>(this.attach_ProductCategoryMaps), new Notification<ProductCategoryMap>(this.detach_ProductCategoryMaps));
      this._Category = default(EntityRef<Category>);
      this._Supplier = default(EntityRef<Supplier>);
    }
    
    [Column(Storage="_ProductID", DBType="Int NOT NULL IDENTITY", Id=true, AutoGen=true)]
    [DataObjectField(true, true, false)]
    [Precision(Precision=10, Scale=255)]
    public int ProductID {
      get {
        return this._ProductID;
      }
      set {
        if ((this._ProductID != value)) {
          this.OnPropertyChanging("ProductID");
          this._ProductID = value;
          this.OnPropertyChanged("ProductID");
        }
      }
    }
    
    [Column(Storage="_ProductName", DBType="NVarChar(40) NOT NULL")]
    [DataObjectField(false, false, false, 40)]
    public string ProductName {
      get {
        return this._ProductName;
      }
      set {
        if ((this._ProductName != value)) {
          this.OnPropertyChanging("ProductName");
          this._ProductName = value;
          this.OnPropertyChanged("ProductName");
        }
      }
    }
    
    [Column(Storage="_SupplierID", DBType="Int")]
    [DataObjectField(false, false, true)]
    [Precision(Precision=10, Scale=255)]
    public System.Nullable<int> SupplierID {
      get {
        return this._SupplierID;
      }
      set {
        if ((this._SupplierID != value)) {
          this.OnPropertyChanging("SupplierID");
          this._SupplierID = value;
          this.OnPropertyChanged("SupplierID");
        }
      }
    }
    
    [Column(Storage="_CategoryID", DBType="Int")]
    [DataObjectField(false, false, true)]
    [Precision(Precision=10, Scale=255)]
    public System.Nullable<int> CategoryID {
      get {
        return this._CategoryID;
      }
      set {
        if ((this._CategoryID != value)) {
          this.OnPropertyChanging("CategoryID");
          this._CategoryID = value;
          this.OnPropertyChanged("CategoryID");
        }
      }
    }
    
    [Column(Storage="_QuantityPerUnit", DBType="NVarChar(20)")]
    [DataObjectField(false, false, false, 20)]
    public string QuantityPerUnit {
      get {
        return this._QuantityPerUnit;
      }
      set {
        if ((this._QuantityPerUnit != value)) {
          this.OnPropertyChanging("QuantityPerUnit");
          this._QuantityPerUnit = value;
          this.OnPropertyChanged("QuantityPerUnit");
        }
      }
    }
    
    [Column(Storage="_UnitPrice", DBType="Money")]
    [DataObjectField(false, false, true)]
    [Precision(Precision=19, Scale=255)]
    public System.Nullable<decimal> UnitPrice {
      get {
        return this._UnitPrice;
      }
      set {
        if ((this._UnitPrice != value)) {
          this.OnPropertyChanging("UnitPrice");
          this._UnitPrice = value;
          this.OnPropertyChanged("UnitPrice");
        }
      }
    }
    
    [Column(Storage="_UnitsInStock", DBType="SmallInt")]
    [DataObjectField(false, false, true)]
    [Precision(Precision=5, Scale=255)]
    public System.Nullable<short> UnitsInStock {
      get {
        return this._UnitsInStock;
      }
      set {
        if ((this._UnitsInStock != value)) {
          this.OnPropertyChanging("UnitsInStock");
          this._UnitsInStock = value;
          this.OnPropertyChanged("UnitsInStock");
        }
      }
    }
    
    [Column(Storage="_UnitsOnOrder", DBType="SmallInt")]
    [DataObjectField(false, false, true)]
    [Precision(Precision=5, Scale=255)]
    public System.Nullable<short> UnitsOnOrder {
      get {
        return this._UnitsOnOrder;
      }
      set {
        if ((this._UnitsOnOrder != value)) {
          this.OnPropertyChanging("UnitsOnOrder");
          this._UnitsOnOrder = value;
          this.OnPropertyChanged("UnitsOnOrder");
        }
      }
    }
    
    [Column(Storage="_ReorderLevel", DBType="SmallInt")]
    [DataObjectField(false, false, true)]
    [Precision(Precision=5, Scale=255)]
    public System.Nullable<short> ReorderLevel {
      get {
        return this._ReorderLevel;
      }
      set {
        if ((this._ReorderLevel != value)) {
          this.OnPropertyChanging("ReorderLevel");
          this._ReorderLevel = value;
          this.OnPropertyChanged("ReorderLevel");
        }
      }
    }
    
    [Column(Storage="_Discontinued", DBType="Bit NOT NULL")]
    [DataObjectField(false, false, false)]
    public bool Discontinued {
      get {
        return this._Discontinued;
      }
      set {
        if ((this._Discontinued != value)) {
          this.OnPropertyChanging("Discontinued");
          this._Discontinued = value;
          this.OnPropertyChanged("Discontinued");
        }
      }
    }
    
    [Column(Storage="_AttributeXML", DBType="Xml", UpdateCheck=System.Data.DLinq.UpdateCheck.Never)]
    [DataObjectField(false, false, false, 2147483647)]
    public string AttributeXML {
      get {
        return this._AttributeXML;
      }
      set {
        if ((this._AttributeXML != value)) {
          this.OnPropertyChanging("AttributeXML");
          this._AttributeXML = value;
          this.OnPropertyChanged("AttributeXML");
        }
      }
    }
    
    [Column(Storage="_DateCreated", DBType="DateTime")]
    [DataObjectField(false, false, true)]
    public System.Nullable<System.DateTime> DateCreated {
      get {
        return this._DateCreated;
      }
      set {
        if ((this._DateCreated != value)) {
          this.OnPropertyChanging("DateCreated");
          this._DateCreated = value;
          this.OnPropertyChanged("DateCreated");
        }
      }
    }
    
    [Column(Storage="_ProductGUID", DBType="UniqueIdentifier")]
    [DataObjectField(false, false, true)]
    public System.Nullable<System.Guid> ProductGUID {
      get {
        return this._ProductGUID;
      }
      set {
        if ((this._ProductGUID != value)) {
          this.OnPropertyChanging("ProductGUID");
          this._ProductGUID = value;
          this.OnPropertyChanged("ProductGUID");
        }
      }
    }
    
    [Association(Name="FK_Order_Details_Products", Storage="_OrderDetails", OtherKey="ProductID")]
    public EntitySet<OrderDetail> OrderDetails {
      get {
        return this._OrderDetails;
      }
      set {
        this._OrderDetails.Assign(value);
      }
    }
    
    [Association(Name="FK_Product_Category_Map_Products", Storage="_ProductCategoryMaps", OtherKey="ProductID")]
    public EntitySet<ProductCategoryMap> ProductCategoryMaps {
      get {
        return this._ProductCategoryMaps;
      }
      set {
        this._ProductCategoryMaps.Assign(value);
      }
    }
    
    [Association(Name="FK_Products_Categories", Storage="_Category", ThisKey="CategoryID", IsParent=true)]
    public Category Category {
      get {
        return this._Category.Entity;
      }
      set {
        Category v = this._Category.Entity;
        if ((v != value)) {
          this.OnPropertyChanging("Category");
          if ((v != null)) {
            this._Category.Entity = null;
            v.Products.Remove(this);
          }
          this._Category.Entity = value;
          if ((value != null)) {
            value.Products.Add(this);
          }
          this.OnPropertyChanged("Category");
        }
      }
    }
    
    [Association(Name="FK_Products_Suppliers", Storage="_Supplier", ThisKey="SupplierID", IsParent=true)]
    public Supplier Supplier {
      get {
        return this._Supplier.Entity;
      }
      set {
        Supplier v = this._Supplier.Entity;
        if ((v != value)) {
          this.OnPropertyChanging("Supplier");
          if ((v != null)) {
            this._Supplier.Entity = null;
            v.Products.Remove(this);
          }
          this._Supplier.Entity = value;
          if ((value != null)) {
            value.Products.Add(this);
          }
          this.OnPropertyChanged("Supplier");
        }
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    private void attach_OrderDetails(OrderDetail entity) {
      this.OnPropertyChanging(null);
      entity.Product = this;
      this.OnPropertyChanged(null);
    }
    
    private void detach_OrderDetails(OrderDetail entity) {
      this.OnPropertyChanging(null);
      entity.Product = null;
      this.OnPropertyChanged(null);
    }
    
    private void attach_ProductCategoryMaps(ProductCategoryMap entity) {
      this.OnPropertyChanging(null);
      entity.Product = this;
      this.OnPropertyChanged(null);
    }
    
    private void detach_ProductCategoryMaps(ProductCategoryMap entity) {
      this.OnPropertyChanging(null);
      entity.Product = null;
      this.OnPropertyChanged(null);
    }
  }
}
