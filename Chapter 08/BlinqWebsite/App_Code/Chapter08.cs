//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1318
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Chapter08.BlinqDAL {
  using System;
  using System.Collections.Generic;
  using System.ComponentModel;
  using System.Reflection;
  using System.Query;
  using System.Expressions;
  using System.Data;
  using System.Data.DLinq;
  
  
  public partial class Chapter08 : DataContext {
    
    public Table<Location> Locations;
    
    public Table<Person> Persons;
    
    public Chapter08(string connection) : 
        base(connection) {
    }
    
    public Chapter08(System.Data.IDbConnection connection) : 
        base(connection) {
    }
    
    public Chapter08(string connection, System.Data.DLinq.MappingSource mappingSource) : 
        base(connection, mappingSource) {
    }
    
    public Chapter08(System.Data.IDbConnection connection, System.Data.DLinq.MappingSource mappingSource) : 
        base(connection, mappingSource) {
    }
  }
  
  [Table(Name="Location")]
  public partial class Location : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private long _ID;
    
    private string _City;
    
    private string _State;
    
    private System.DateTime _Creation;
    
    private System.DateTime _Modified;
    
    private EntitySet<Person> _Persons;
    
    public Location() {
      this._Persons = new EntitySet<Person>(new Notification<Person>(this.attach_Persons), new Notification<Person>(this.detach_Persons));
    }
    
    [Column(Storage="_ID", DBType="BigInt NOT NULL IDENTITY", Id=true, AutoGen=true)]
    [DataObjectField(true, true, false)]
    [Precision(Precision=19, Scale=255)]
    public long ID {
      get {
        return this._ID;
      }
      set {
        if ((this._ID != value)) {
          this.OnPropertyChanging("ID");
          this._ID = value;
          this.OnPropertyChanged("ID");
        }
      }
    }
    
    [Column(Storage="_City", DBType="NVarChar(50) NOT NULL")]
    [DataObjectField(false, false, false, 50)]
    public string City {
      get {
        return this._City;
      }
      set {
        if ((this._City != value)) {
          this.OnPropertyChanging("City");
          this._City = value;
          this.OnPropertyChanged("City");
        }
      }
    }
    
    [Column(Storage="_State", DBType="NVarChar(2) NOT NULL")]
    [DataObjectField(false, false, false, 2)]
    public string State {
      get {
        return this._State;
      }
      set {
        if ((this._State != value)) {
          this.OnPropertyChanging("State");
          this._State = value;
          this.OnPropertyChanged("State");
        }
      }
    }
    
    [Column(Storage="_Creation", DBType="DateTime NOT NULL")]
    [DataObjectField(false, false, false)]
    public System.DateTime Creation {
      get {
        return this._Creation;
      }
      set {
        if ((this._Creation != value)) {
          this.OnPropertyChanging("Creation");
          this._Creation = value;
          this.OnPropertyChanged("Creation");
        }
      }
    }
    
    [Column(Storage="_Modified", DBType="DateTime NOT NULL")]
    [DataObjectField(false, false, false)]
    public System.DateTime Modified {
      get {
        return this._Modified;
      }
      set {
        if ((this._Modified != value)) {
          this.OnPropertyChanging("Modified");
          this._Modified = value;
          this.OnPropertyChanged("Modified");
        }
      }
    }
    
    [Association(Name="FK_Person_Location", Storage="_Persons", OtherKey="LocationID")]
    public EntitySet<Person> Persons {
      get {
        return this._Persons;
      }
      set {
        this._Persons.Assign(value);
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    private void attach_Persons(Person entity) {
      this.OnPropertyChanging(null);
      entity.Location = this;
      this.OnPropertyChanged(null);
    }
    
    private void detach_Persons(Person entity) {
      this.OnPropertyChanging(null);
      entity.Location = null;
      this.OnPropertyChanged(null);
    }
  }
  
  [Table(Name="Person")]
  public partial class Person : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private long _ID;
    
    private string _FirstName;
    
    private string _LastName;
    
    private long _LocationID;
    
    private System.DateTime _Creation;
    
    private System.DateTime _Modified;
    
    private EntityRef<Location> _Location;
    
    public Person() {
      this._Location = default(EntityRef<Location>);
    }
    
    [Column(Storage="_ID", DBType="BigInt NOT NULL IDENTITY", Id=true, AutoGen=true)]
    [DataObjectField(true, true, false)]
    [Precision(Precision=19, Scale=255)]
    public long ID {
      get {
        return this._ID;
      }
      set {
        if ((this._ID != value)) {
          this.OnPropertyChanging("ID");
          this._ID = value;
          this.OnPropertyChanged("ID");
        }
      }
    }
    
    [Column(Storage="_FirstName", DBType="NVarChar(50) NOT NULL")]
    [DataObjectField(false, false, false, 50)]
    public string FirstName {
      get {
        return this._FirstName;
      }
      set {
        if ((this._FirstName != value)) {
          this.OnPropertyChanging("FirstName");
          this._FirstName = value;
          this.OnPropertyChanged("FirstName");
        }
      }
    }
    
    [Column(Storage="_LastName", DBType="NVarChar(50) NOT NULL")]
    [DataObjectField(false, false, false, 50)]
    public string LastName {
      get {
        return this._LastName;
      }
      set {
        if ((this._LastName != value)) {
          this.OnPropertyChanging("LastName");
          this._LastName = value;
          this.OnPropertyChanged("LastName");
        }
      }
    }
    
    [Column(Storage="_LocationID", DBType="BigInt NOT NULL")]
    [DataObjectField(false, false, false)]
    [Precision(Precision=19, Scale=255)]
    public long LocationID {
      get {
        return this._LocationID;
      }
      set {
        if ((this._LocationID != value)) {
          this.OnPropertyChanging("LocationID");
          this._LocationID = value;
          this.OnPropertyChanged("LocationID");
        }
      }
    }
    
    [Column(Storage="_Creation", DBType="DateTime NOT NULL")]
    [DataObjectField(false, false, false)]
    public System.DateTime Creation {
      get {
        return this._Creation;
      }
      set {
        if ((this._Creation != value)) {
          this.OnPropertyChanging("Creation");
          this._Creation = value;
          this.OnPropertyChanged("Creation");
        }
      }
    }
    
    [Column(Storage="_Modified", DBType="DateTime NOT NULL")]
    [DataObjectField(false, false, false)]
    public System.DateTime Modified {
      get {
        return this._Modified;
      }
      set {
        if ((this._Modified != value)) {
          this.OnPropertyChanging("Modified");
          this._Modified = value;
          this.OnPropertyChanged("Modified");
        }
      }
    }
    
    [Association(Name="FK_Person_Location", Storage="_Location", ThisKey="LocationID", IsParent=true)]
    public Location Location {
      get {
        return this._Location.Entity;
      }
      set {
        Location v = this._Location.Entity;
        if ((v != value)) {
          this.OnPropertyChanging("Location");
          if ((v != null)) {
            this._Location.Entity = null;
            v.Persons.Remove(this);
          }
          this._Location.Entity = value;
          if ((value != null)) {
            value.Persons.Add(this);
          }
          this.OnPropertyChanged("Location");
        }
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
  }
}
